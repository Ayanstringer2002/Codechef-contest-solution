#include <bits/stdc++.h>
using namespace std;
using lol=long long int;
const lol mod=998244353;
const int N=2e5+5;
vector<int> cost(N);
vector<vector<int>> g(N),gr(N);
vector<int> vis(N,false);
vector<int> order;
vector<int> component;

lol binexp(lol base,lol power){
    if(power==0)    return 1ll;
    lol res=binexp(base,power/2);
    res=(res*res)%mod;
    if(power&1) res=(res*base)%mod;
    return res;
}

void dfs1(int u){
    vis[u]=true;
    for(auto v:g[u]){
        if(vis[v])  continue;
        dfs1(v);
    }
    order.push_back(u);
}

void dfs2(int u){
    vis[u]=true;
    component.push_back(u);
    for(auto v:gr[u]){
        if(vis[v])  continue;
        dfs2(v);
    }
}

int main() {
	int _=1;
	//cin>>_;
	while(_--){
        int n,m;
        cin>>n>>m;
        for(int i=1;i<=n;i++)   cin>>cost[i];
        for(int i=0;i<m;i++){
            int u,v;
            cin>>u>>v;
            g[u].push_back(v);
            gr[v].push_back(u);
        }
        for(int i=1;i<=n;i++){
            if(vis[i])  continue;
            dfs1(i);
        }
        reverse(order.begin(),order.end());
        vis.assign(N,false);
        lol ans=0;
        for(auto u:order){
            if(vis[u])  continue;
            dfs2(u);
            // for(auto v:component){
            //     cout<<v<<" ";
            // }
            // cout<<endl;
            bool works=true;
            lol sum=0;
            set<int> st{component.begin(),component.end()};
            for(auto v:component){
                sum=(sum+cost[v])%mod;
                for(auto w:gr[v]){
                    if(st.find(w)==st.end()){
                        works=false;
                    }
                }
            }
            if(works){
                lol term=(sum*binexp(component.size(),mod-2))%mod;
                ans=(ans+term)%mod;
            }
            component.clear();
        }
        cout<<ans;
	}
	return 0;
}
