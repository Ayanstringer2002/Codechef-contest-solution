#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Interval {
    int start;
    int end;
};

bool compareIntervals(Interval a, Interval b) {
    return a.start < b.start;
}

vector<Interval> mergeIntervals(vector<Interval>& intervals) {
    if (intervals.empty()) {
        return {};
    }

    sort(intervals.begin(), intervals.end(), compareIntervals);

    vector<Interval> merged;
    merged.push_back(intervals[0]);

    for (int i = 1; i < intervals.size(); ++i) {
        if (intervals[i].start <= merged.back().end) {
            merged.back().end = max(merged.back().end, intervals[i].end);
        } else {
            merged.push_back(intervals[i]);
        }
    }

    return merged;
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        vector<Interval> intervals(N);

        for (int i = 0; i < N; ++i) {
            cin >> intervals[i].start >> intervals[i].end;
        }

        vector<Interval> mergedIntervals = mergeIntervals(intervals);

        for (const Interval& interval : mergedIntervals) {
            cout << interval.start << " " << interval.end << endl;
        }
    }

    return 0;
}
